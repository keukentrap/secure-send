# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:

  test:
    name: Go tests + code analysis
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18

    - name: Build
      run: go build -v ./...  
      
    - name: Check format
      run: gofmt -d .
      
    - name: Static Analysis
      run: go install honnef.co/go/tools/cmd/staticcheck@latest && staticcheck .

    - name: Test
      run: go test -v ./...

#   docker:
#     needs: test
#     runs-on: ubuntu-latest
#     name: Docker Build, Tag, Push
#     permissions:
#       contents: read
#       packages: write

#     steps:
#     - name: Checkout
#       uses: actions/checkout@v3
      
#     - name: Login to GitHub Container Registry
#       uses: docker/login-action@v2
#       with:
#         registry: ghcr.io
#         username: ${{ github.actor }}
#         password: ${{ secrets.GITHUB_TOKEN }}
        
#     - name: Extract metadata (tags, labels) for Docker
#       id: meta
#       uses: docker/metadata-action@v4
#       with:
#         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        
#     - name: Build container image
#       uses: docker/build-push-action@v3
#       with:
#         context: .
#         push: true
#         tags: ${{ steps.meta.outputs.tags }}
#         labels: ${{ steps.meta.outputs.labels }}
#       env:
#         SMTP_PASS: ${{ secrets.SMTP_PASS }}

  podman:
    name: Build image
#     needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Clone the repository
        uses: actions/checkout@v3
        
      - name: Extract metadata (tags, labels) for Podman
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Buildah Action
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          containerfiles: |
            ./Dockerfile
      - name: Log in to the GitHub Container registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to GitHub Container Repository
        id: push-to-ghcr
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ${{ env.REGISTRY }}

      - name: Print image URL
        run: echo "Image pushed to ${{ steps.push-to-ghcr.outputs.registry-paths }}"

  deploy:
    needs: podman
    runs-on: ubuntu-latest
    name: Deploy to production
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy to Production
        run: |
          printf "%s\n" "$SSH_KEY" > .id_ed25519 && \
          chmod 600 .id_ed25519 && \
          ./deploy.sh $HOST .id_ed25519
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
          HOST: wmulder@kotter.wmulder.nl
